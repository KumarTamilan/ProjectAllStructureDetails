package com.baseclass;

import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.safari.SafariDriver;
import org.openqa.selenium.support.ui.Select;

import io.github.bonigarcia.wdm.WebDriverManager;

public class BaseClass {

	public static WebDriver driver;

	public static void getText(List<WebElement> element) {

		for(WebElement allOption : element) {
			String text = allOption.getText();
			System.out.println(text);
		}
	}
	public static void getTheText(WebElement element) {

		String text = element.getText();
		System.out.println(text);
	}
	public static void dropDownByUsingForLoop(List<WebElement> element,String value) {

		for(WebElement all : element) {
			String text = all.getText();
			String valueOf = String.valueOf(text);
			if(valueOf.contains(value)) {
				
			}
		}
	}
	public static void getTheAllData(List<WebElement> element) {

		for(WebElement allData : element) {
			String text = allData.getText();
			System.out.println(text);
		}
	}
	public static void sysout(String value) {

		System.out.println(value);
	}
	public static boolean selectableOrNot(WebElement element) {

		boolean selected = element.isSelected();
		System.out.println(selected);
		return selected;
	}
	public static void dropDown(String type,WebElement element,String value) {
		
		Select s = new Select(element);
		
		if(type.equalsIgnoreCase("byValue")) {
			s.selectByValue(value);
		}else if(type.equalsIgnoreCase("byIndex")) {
			int parseInt = Integer.parseInt(value);
			s.selectByIndex(parseInt);
		}else if(type.equalsIgnoreCase("byVisibleText")) {
			s.selectByVisibleText(value);
		}
	}
	public static void inputValueElement(String value,WebElement element) {

		element.sendKeys(value);
	}
	public static void clickOnElement(WebElement element) {

		element.click();
	}
	public static void clearTheElement(WebElement element) {

		element.clear();
	}
	public static WebDriver navigateBack() {

		driver.navigate().back();
		return driver;
	}
	public static WebDriver getUrl(String url) {

		driver.get(url);
		return driver;
	}
	public static void inputValueElementWithTab(WebElement element,String value) {

		element.sendKeys(value+Keys.TAB);
	}
	public static void simpleAlert() {

		driver.switchTo().alert().accept();
	}
	public static void confirmAlert() {

		driver.switchTo().alert().accept();
	}
	public static void promptAlert(String value) {

		driver.switchTo().alert().sendKeys(value);
		driver.switchTo().alert().accept();
	}
	public static void javaScriptExecutor(String value) {

		JavascriptExecutor jse = (JavascriptExecutor) driver;
		jse.executeScript(value);
	}
	public static void switchToFrame(WebElement element) {

		driver.switchTo().frame(element);
	}
	public static void switchToDefaultContent() {

		driver.switchTo().defaultContent();
	}
	public static void switchToParentFrame() {

		driver.switchTo().parentFrame();
	}
	public static WebDriver browserLaunch(String type) {

		if(type.equalsIgnoreCase("chrome")) {
			WebDriverManager.chromedriver().setup();
			 driver = new ChromeDriver();
		}else if (type.equalsIgnoreCase("firefox")) {
			WebDriverManager.firefoxdriver().setup();
			 driver = new FirefoxDriver();
		}else if(type.equalsIgnoreCase("edgedriver")) {
			WebDriverManager.edgedriver().setup();
			 driver = new EdgeDriver();
		}else if(type.equalsIgnoreCase("safari")) {
			WebDriverManager.safaridriver().setup();
			 driver = new SafariDriver();
		}
			
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		return driver;
	}
	public static boolean isDisplayed(WebElement element) {

		boolean displayed = element.isDisplayed();
		System.out.println(displayed);
		return displayed;
	}
	public static void driverClose() {

		driver.close();
	}
	public static void driverQuit() {

		driver.quit();
	}
	public static void windowHandling1() {

		Set<String> windowHandles = driver.getWindowHandles();
		Iterator<String> iterator = windowHandles.iterator();
		String parentWindow = iterator.next();
		String childWindow = iterator.next();
		driver.switchTo().window(childWindow);
	}
	public static void windowHandling2() {

		Set<String> windowHandles2 = driver.getWindowHandles();
		Iterator<String> iterator2 = windowHandles2.iterator();
		String parentWindow1 = iterator2.next();
		String childWindow1 = iterator2.next();
		String childWindow2 = iterator2.next();
		driver.switchTo().window(childWindow2);
	}
	public static void windowHandling3() {

		Set<String> windowHandles2 = driver.getWindowHandles();
		Iterator<String> iterator2 = windowHandles2.iterator();
		String parentWindow1 = iterator2.next();
		String childWindow1 = iterator2.next();
		String childWindow2 = iterator2.next();
		driver.switchTo().window(childWindow1);
	}
	
	public static void windowHandling4() {

		Set<String> windowHandles2 = driver.getWindowHandles();
		Iterator<String> iterator2 = windowHandles2.iterator();
		String parentWindow1 = iterator2.next();
		driver.switchTo().window(parentWindow1);
	}
	public static void moveToElement(WebElement element) {

		Actions as = new Actions(driver);
		as.moveToElement(element).perform();
	}
	public static void dragAndDropBy(WebElement element,int xOffset,int yOffset) {

		Actions as = new Actions(driver);
		as.dragAndDropBy(element, xOffset, yOffset).perform();
		
	}
	public static void dragAndDrop(WebElement element,WebElement element1) {

		Actions as = new Actions(driver);
		as.dragAndDrop(element, element1).perform();
	}
	
	
}
